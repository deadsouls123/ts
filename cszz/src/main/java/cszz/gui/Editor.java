package cszz.gui;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.GroupLayout;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

import cszz.util.ClassExecutor;

/**
 *
 * 
 */

public class Editor extends JFrame {

	private static final String INPUT_SAVE_FILE_NAME = "请输入要保存的文件名";

	private static final String INPUT_FILE_NAME = "请输入文件名";

	private static final String WORKSPACE = "workspace";

	private static final String CSZZ2 = ".cszz";

	private static final String CSZZ = "cszz";

	private static final String JAVA = "Java";

	private static final String SAVE = "Save";

	private static final String SMALLER_FONT = "Smaller font";

	private static final String LARGER_FONT = "Larger font";

	private static final String VIEW = "View";

	private static final String RUN = "Run";

	private static final String OPEN = "Open";

	private static final String NEW = "New";

	private static final String EXIT = "Exit";

	private static final String FILE_NAME = "File";

	private static final String DIALOG = "Dialog";

	private static final String CSZZ_EDITOR = "Cszz Editor";

	private static final Logger LOGGER = Logger.getLogger(Editor.class.getName());

	private static final long serialVersionUID = -4688761690508835245L;

    private HighlightJPane codeArea;
    private JMenuBar jMenuBar1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JSplitPane jSplitPane1;
    private JTextArea logArea;
    private JMenuItem menuExit;
    private JMenuItem menuNew;
    private JMenuItem menuOpen;
    private JMenuItem menuSave;
    private JMenuItem menuLargerFont;
    private JMenuItem menuRun;
    private JMenuItem menuSmallerFont;
    private JMenu menuTopFIle;
    private JMenu menuTopRun;
    private JMenu menuTopView;

    private File mFile = null;

    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {

        jSplitPane1 = new JSplitPane();
        jScrollPane1 = new JScrollPane();
        codeArea = new HighlightJPane();
        jScrollPane2 = new JScrollPane();
        logArea = new JTextArea();
        jMenuBar1 = new JMenuBar();
        menuTopFIle = new JMenu();
        menuExit = new JMenuItem();
        menuNew = new JMenuItem();
        menuOpen = new JMenuItem();
        menuSave = new JMenuItem();
        menuTopRun = new JMenu();
        menuRun = new JMenuItem();
        menuTopView = new JMenu();
        menuLargerFont = new JMenuItem();
        menuSmallerFont = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle(CSZZ_EDITOR);
        setLocationByPlatform(true);

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(420);
        jSplitPane1.setOrientation(JSplitPane.VERTICAL_SPLIT);

        jScrollPane1.setViewportView(codeArea);
        logArea.setBackground(new Color(18,18,18));
        logArea.setForeground(new Color(0xF9,0xF9,0xF9));

        jSplitPane1.setTopComponent(jScrollPane1);

        logArea.setEditable(false);
        logArea.setColumns(20);
        logArea.setRows(5);
        jScrollPane2.setViewportView(logArea);

        jSplitPane1.setRightComponent(jScrollPane2);

        jMenuBar1.setFont(new Font(DIALOG, 0, 14)); // NOI18N

        menuTopFIle.setText(FILE_NAME);

        menuExit.setText(EXIT);
        menuExit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        
        menuNew.setText(NEW);
        menuNew.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                menuNewActionPerformed(evt);
            }
        });
        
        menuOpen.setText(OPEN);
        menuOpen.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        
        menuSave.setText(SAVE);
        menuSave.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                menuSaveActionPerformed(evt);
            }
        });
        menuTopFIle.add(menuNew);
        menuTopFIle.add(menuOpen);
        menuTopFIle.add(menuSave);
        menuTopFIle.add(menuExit);

        jMenuBar1.add(menuTopFIle);

        menuTopRun.setText(RUN);

        menuRun.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, InputEvent.CTRL_MASK));
        menuRun.setText(RUN);
        menuRun.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                menuRunActionPerformed(evt);
            }
        });
        menuTopRun.add(menuRun);

        jMenuBar1.add(menuTopRun);

        menuTopView.setText(VIEW);

        menuLargerFont.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, InputEvent.SHIFT_MASK | InputEvent.CTRL_MASK));
        menuLargerFont.setText(LARGER_FONT);
        menuLargerFont.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                menuLargerFontActionPerformed(evt);
            }
        });
        menuTopView.add(menuLargerFont);

        menuSmallerFont.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.SHIFT_MASK | InputEvent.CTRL_MASK));
        menuSmallerFont.setText(SMALLER_FONT);
        menuSmallerFont.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                menuSmallerFontActionPerformed(evt);
            }
        });
        menuTopView.add(menuSmallerFont);

        jMenuBar1.add(menuTopView);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
        );

        pack();
    }

    private void menuExitActionPerformed(ActionEvent evt) {
        System.exit(0);
    }
    
    private void menuNewActionPerformed(ActionEvent evt) {
        String name = JOptionPane.showInputDialog(INPUT_FILE_NAME);
        if(name != null && !name.equals("")) {
            File file = new File(WORKSPACE + File.separator + name + CSZZ2);
            File dir = new File(WORKSPACE);

            if(!dir.exists()) {
                dir.mkdir();
            }
            if(!file.exists()) {
                try {
                    codeArea.setText("");
                    file.createNewFile();
                    mFile = file;
                } catch (IOException e) {
                	LOGGER.log(Level.SEVERE, "Create new file failed!!\n",e);
                }
            } else {
            	LOGGER.log(Level.SEVERE, "File exist!\n");
            }
        }
    }

    private void menuOpenActionPerformed(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(""));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(JAVA, CSZZ);
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(new JPanel());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            codeArea.setText("");
            mFile = chooser.getSelectedFile();
            FileReader reader;
            String result = "";
            try {
                reader = new FileReader(mFile);
                BufferedReader in = new BufferedReader(reader);
                String c = "";
                while((c = in.readLine()) != null) {
                    result += c;
                    result += "\n";
                }
                codeArea.setText(result);
                codeArea.syntaxParse();
                in.close();
            } catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IOException e) {
                // TODO: handle exception
            }
        }
    }

    private void menuSaveActionPerformed(ActionEvent evt) {
        String code = codeArea.getText();
        if(mFile == null) {
            String name = JOptionPane.showInputDialog(INPUT_SAVE_FILE_NAME);
            if(name != null && !name.equals("")) {
                File file = new File(WORKSPACE + File.separator + name + CSZZ2);
                File dir = new File(WORKSPACE);
                if(!dir.exists()) {
                    dir.mkdir();
                }
                if(!file.exists()) {
                    try {
                        file.createNewFile();
                        mFile = file;
                    } catch (IOException e) {
                        LOGGER.log(Level.SEVERE, "Create new file failed!!\n",e);
                    }
                } else {
                    LOGGER.log(Level.SEVERE, "File exist!\n");
                }
            }
        }
        try {
            FileWriter outFile = new FileWriter(mFile);
            BufferedWriter out = new BufferedWriter(outFile);
            out.write(code);
            out.close();
        } catch (FileNotFoundException e) {
            LOGGER.log(Level.SEVERE, "Can't find the saving file!!\n", e);
        } catch (IOException e) {
            LOGGER.log(Level.SEVERE, "Write to file failed!!\n", e);
        }
    }
    
    private void menuSmallerFontActionPerformed(ActionEvent evt) {
        //enlargeFontSize(-2);
    }

    private void menuLargerFontActionPerformed(ActionEvent evt) {
        //enlargeFontSize(2);
    }

    @SuppressWarnings("resource")
	private void menuRunActionPerformed(ActionEvent evt) {
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(os);
        System.setErr(ps);
        System.setOut(ps);
        cszz.CszzClassLoader classLoader = new cszz.CszzClassLoader();
        String code = codeArea.getText();
        String className = "Code" + (new Date()).getTime();
        try{
            Class<?> clazz = classLoader.parseSource(className, code,className);
            if(clazz != null){
                //TODO it seems that the compilation will not stop when encountering an error
                //System.out.println("compile " + className + " successfully.");
                ClassExecutor.executeMain(clazz, new String[0]);
            }
        } catch (Exception ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
        logArea.setText(os.toString());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }
}
